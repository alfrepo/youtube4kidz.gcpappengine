buildscript {      // Configuration for building
    repositories {
        jcenter()      // Bintray's repository - a fast Maven Central mirror & more
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}

repositories {   // repositories for JARs you access in your code
    maven {
        url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
    }

//maven {
//  url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository if needed
//}

    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.google.cloud.tools.appengine'

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedCompile 'com.google.appengine:appengine:+'

    /*
        Enables the annotation @ConfigProperties to load the properties

        Here it is important to exclude the tomcat dependency, because it is not used in the appengine.
        Otherwise there will be exceptions, because to Tomcat classes will be found in the managed environment.
    */
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.2.RELEASE') {
        exclude(module: 'spring-boot-starter-tomcat')
    }

    // As storage use Google Cloud Datastore. This is the lib.
    compile group: 'com.google.cloud', name: 'google-cloud-datastore', version: '1.29.0'
    compile group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.9.1'

    /*
            VERY IMPORTANT  the right version of Guava must be referenced here.
            Otherwise there will be a "NoSuchMethodException", because of transitive dependencies to older Guava libs.
    */
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.0.2.RELEASE'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.24.0.RELEASE'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.2.RELEASE'

    /* instead of tomcat enable the servlets */
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
}

gretty {
    httpPort = 8080
    contextPath = '/'
    servletContainer = 'jetty9'  // What App Engine Flexible uses
}

appengine {

    deploy {   // deploy configuration
        stopPreviousVersion = true  // default - stop the current version
        promote = true              // default - & make this the current version
        version = 'GCLOUD_CONFIG'   // to have gcloud generate a version for you
        project = 'GCLOUD_CONFIG'   // to use project from gcloud config
    }

}

group = 'com.example.appengine'   // Generated output GroupId
version = '1.0-SNAPSHOT'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/webapp"]
        }
    }
}


// ANGULAR integration

def webappDir = "$projectDir/src/main/angular"

processResources {
    dependsOn "buildAngular"
}


task installAngular(type:Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task buildAngular(type:Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"

    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP

    // ng doesn't exist as a file in windows -> ng.cmd
    def cmd = "ng"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        cmd = "ng.cmd"
    }


    // use environment if passed via "gradlew appengineDeploy -Penvironment=prod"
    if ( project.hasProperty("environment") ) {
        commandLine cmd, "build", "--environment", project.environment
    }else{
        commandLine cmd, "build"
    }
}

// adds static angular-generated-files, to the "classes" folder in WEB-INF, inside the war
war {
    from("$webappDir/dist/") {
        include '**/*.*'
        into '/WEB-INF/classes/'
    }
}
